import Head from "next/head";
import { useState, useEffect } from "react";

import { toast } from "react-toastify";

import { Navbar } from "../components/Navbar";

import styles from "@/styles/portfolios.module.css";
import { PortfolioComponent } from "../components/PortfolioComponent";
import useTopLevelUserData from "../hooks/useTopLevelUserData";

function Portfolios() {
  const { data, error, mutate, helpers } = useTopLevelUserData();
  const [title, setTitle] = useState<string>("");
  const [errorMessage, setErrorMessage] = useState<string>("");
  const [successMessage, setSuccessMessage] = useState<string>("");
  const [disabled, setDisabled] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const portfolios = data?.portfolios || [];

  async function handleSubmit(e: any) {
    e.preventDefault();
    setErrorMessage("");
    setSuccessMessage("");
    setIsLoading(true);
    if (title.trim().length === 0) {
      setErrorMessage("Please enter a title");
      return;
    }
    setDisabled(true);
    try {
      await helpers.createPortfolio(title);
    } catch (e) {
      console.error(e);
    }
    setDisabled(false);
    setIsLoading(false);
    setTitle("");
  }

  function handleDelete(portfolioId: string) {
    return helpers.deletePortfolio(portfolioId);
  }

  function buildPortfolios() {
    if (!portfolios) return <h2>Could not load user portfolios</h2>;
    let result = [];
    for (let portfolio of portfolios) {
      result.push(
        <div className={styles.portfolio_wrapper} key={portfolio.id}>
          <div className={styles.portfolio_information}>
            <PortfolioComponent key={portfolio.id} portfolioObj={portfolio}/>
          </div>
          <div className={styles.button_wrapper}>
            <button className={`${styles.button} ${styles.add_button}`}>
              Add stock
            </button>
            <button
              className={`${styles.button} ${styles.delete_button}`}
              onClick={() => handleDelete(portfolio.id)}
            >
              Delete portfolio
            </button>
          </div>
        </div>
      );
    }
    return result;
  }

  const validatePortfolioTitle = (title: string) => {
    return title.length > 0 && title.length < 50;
  };

  if (error) return <div className={styles.content}>{error}</div>;
  if (!portfolios) return <div className={styles.content}>Loading...</div>;

  return (
    <>
      <Head>
        <title>Portfolios | haptickrill</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Navbar activePage="portfolios" />
        <div className={styles.content}>
          <h1 className={styles.title}>Portfolios</h1>
          <form className={styles.form} onSubmit={handleSubmit}>
            <label className={styles.form_group}>Create a portfolio</label>
            <input
              className={styles.form_group}
              name="symbol"
              placeholder="Enter a title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              disabled={disabled}
            />
            <button
              className={styles.form_group}
              type="submit"
              disabled={!validatePortfolioTitle(title) || disabled || isLoading}
            >
              Submit
            </button>
            {errorMessage && (
              <p className={`${styles.form_message} ${styles.error}`}>
                {errorMessage}
              </p>
            )}
            {successMessage && (
              <p className={`${styles.form_message} ${styles.success}`}>
                {successMessage}
              </p>
            )}
          </form>
          <div>{buildPortfolios()}</div>
        </div>
      </main>
    </>
  );
}

export default Portfolios;
